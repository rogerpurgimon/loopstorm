Index: src/FrontEnd/StormLoopGUI.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/usr/bin/python3\n# -*- encoding: latin-1 -*-\n\nimport os\nimport sys\nfrom PyQt5 import uic\nfrom PyQt5.QtWidgets import QMainWindow, QApplication\n\nimport threading\nimport sounddevice as sd\nimport soundfile as sf\n\nimport essentia\nfrom essentia.standard import *\n\nfrom AudioManager import AudioManager\n\n# A venv was created in the file env in the leonardbalm file,\n# this is where the pip and the python3 is located\n\n\nclass LoopStormGUI(QMainWindow):\n\n    loops = []\n    current_frame = 0\n    def __init__(self):\n        super().__init__()\n        uic.loadUi(\"LoopStormInterface.ui\", self)\n        #self.loops = AudioManager()\n        self.importLoops.clicked.connect(lambda: self.import_loops(self.loops, 4))\n        self.deleteLoop.clicked.connect(lambda: self.remove_loop())\n        self.exportMaster.clicked.connect(lambda: self.export_master())\n        self.selectMaster.clicked.connect(lambda: self.select_loop(0))\n        self.selectLoop1.clicked.connect(lambda: self.select_loop(1))\n        self.selectLoop2.clicked.connect(lambda: self.select_loop(2))\n        self.leftArrow.clicked.connect(lambda: self.arrow(\"left\"))\n        self.rightArrow.clicked.connect(lambda: self.arrow(\"right\"))\n        self.playButton.clicked.connect(lambda: self.play_button())\n\n    def import_loops(self, loops, limit):\n        \"\"\"\n        Loops only come from the loops folder. Modify that folder if we want to use different loops.\n        1. Check amount of loop slots available (this should be represented in a list somewhere)\n        2. Check amount of loops to import in the loops folder.\n        3. If not enough slots pop-up window with a warning and import amount of loops possible.\n        \"\"\"\n        current_file_loops = []\n        directory = 'loops'\n\n        # Filling an auxiliary list with all the loops in the loops file\n        for filename in os.listdir(directory):\n            arg = directory + \"/\" + filename\n            loop = MonoLoader(filename=arg)\n            current_file_loops.append(loop)\n\n        # Checking if there are enough available slots\n        if len(loops) + len(current_file_loops) > limit:\n            raise ValueError(\"Not enough slots available! Remove some loops from LoopStorm or from the loops folder.\")\n        else:\n            print(\"estem dins\")\n            loops.append(current_file_loops)\n\n        #self.represent_loops()\n\n    def represent_loops(self):\n        \"\"\"\n        1. Check if a loop is selected.\n        2. Erase loop data from the loops list somewhere.\n        \"\"\"\n        self.generate_image()\n    \n    def generate_image(self):\n        \"\"\"\n        1. Check if a loop is selected.\n        2. Erase loop data from the loops list somewhere.\n        \"\"\"\n\n    def remove_loop(self):\n        \"\"\"\n        1. Check if a loop is selected.\n        2. Erase loop data from the loops list somewhere.\n        \"\"\"\n\n    def export_master(self):\n        \"\"\"\n        1. Check if a loop is selected.\n        2. Erase loop data from the loops list somewhere.\n        \"\"\"\n\n    def select_loop(self, number):\n        \"\"\"\n        1. Check if a loop is selected.\n        2. Erase loop data from the loops list somewhere.\n        \"\"\"\n\n    def arrow(self, direction):\n        \"\"\"\n        1. Check if a loop is selected.\n        2. Erase loop data from the loops list somewhere.\n        \"\"\"\n\n    def play_button(self):\n        \"\"\"\n        1. Check if a loop is selected.\n        2. Erase loop data from the loops list somewhere.\n        \"\"\"\n        event = threading.Event()\n        data, fs = sf.read(\"audio1.wav\", always_2d=True)\n        #data, fs = sf.read(, always_2d=True)\n        #current_frame = 0\n        \n        def callback(outdata, frames, time, status):\n            #global current_frame \t\n            if status:\n                print(status)\n            chunksize = min(len(data) - self.current_frame, frames)\n            outdata[:chunksize] = data[self.current_frame:self.current_frame + chunksize]\n            if chunksize < frames:\n                outdata[chunksize:] = 0\n                self.current_frame = 0            \t\t\n\t\t#raise sd.CallbackStop()\n            else:\n                self.current_frame += chunksize\n\n        stream = sd.OutputStream(\n            samplerate=fs, channels=data.shape[1],\n            callback=callback, finished_callback=event.set)\n\t\n        with stream:\n            event.wait()  # Wait until playback is finished\n\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    GUI = LoopStormGUI()\n    GUI.show()\n    sys.exit(app.exec_())\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/FrontEnd/StormLoopGUI.py b/src/FrontEnd/StormLoopGUI.py
--- a/src/FrontEnd/StormLoopGUI.py	(revision 5b1035a0c9465ffc54dff382150852126b5d66a4)
+++ b/src/FrontEnd/StormLoopGUI.py	(date 1654790950686)
@@ -9,25 +9,28 @@
 import threading
 import sounddevice as sd
 import soundfile as sf
+import matplotlib.pyplot as plt
+import numpy as np
 
-import essentia
-from essentia.standard import *
+#import essentia
+#from essentia.standard import *
 
-from AudioManager import AudioManager
+#from AudioManager import AudioManager
 
 # A venv was created in the file env in the leonardbalm file,
 # this is where the pip and the python3 is located
 
-
 class LoopStormGUI(QMainWindow):
-
     loops = []
+    fs = 44100
+    selected_loop = 0
     current_frame = 0
+
     def __init__(self):
         super().__init__()
         uic.loadUi("LoopStormInterface.ui", self)
-        #self.loops = AudioManager()
-        self.importLoops.clicked.connect(lambda: self.import_loops(self.loops, 4))
+        # self.loops = AudioManager()
+        self.importLoops.clicked.connect(lambda: self.import_loops(self.loops, self.fs, 4))
         self.deleteLoop.clicked.connect(lambda: self.remove_loop())
         self.exportMaster.clicked.connect(lambda: self.export_master())
         self.selectMaster.clicked.connect(lambda: self.select_loop(0))
@@ -37,7 +40,7 @@
         self.rightArrow.clicked.connect(lambda: self.arrow("right"))
         self.playButton.clicked.connect(lambda: self.play_button())
 
-    def import_loops(self, loops, limit):
+    def import_loops(self, loops, fs, limit):
         """
         Loops only come from the loops folder. Modify that folder if we want to use different loops.
         1. Check amount of loop slots available (this should be represented in a list somewhere)
@@ -45,41 +48,56 @@
         3. If not enough slots pop-up window with a warning and import amount of loops possible.
         """
         current_file_loops = []
+        # sampling_rates = []
         directory = 'loops'
 
         # Filling an auxiliary list with all the loops in the loops file
         for filename in os.listdir(directory):
             arg = directory + "/" + filename
-            loop = MonoLoader(filename=arg)
+            loop, fs = sf.read(arg, always_2d=True)
+            # loop = MonoLoader(filename=arg)
             current_file_loops.append(loop)
+            # sampling_rates.append(fs)
 
         # Checking if there are enough available slots
         if len(loops) + len(current_file_loops) > limit:
             raise ValueError("Not enough slots available! Remove some loops from LoopStorm or from the loops folder.")
         else:
-            print("estem dins")
-            loops.append(current_file_loops)
+            self.loops = current_file_loops
+            # self.fs = sampling_rates
+            print("Loops compilats")
 
-        #self.represent_loops()
+        self.represent_loops()
 
     def represent_loops(self):
         """
         1. Check if a loop is selected.
         2. Erase loop data from the loops list somewhere.
         """
-        self.generate_image()
-    
-    def generate_image(self):
+        i = 0
+        for loop in self.loops:
+            self.generate_image(loop, i)
+            i += 1
+
+    def generate_image(self, loop, i):
         """
         1. Check if a loop is selected.
         2. Erase loop data from the loops list somewhere.
         """
+        time = np.linspace(0, len(loop) / self.fs, num=len(loop))
+
+        plt.figure(1)
+        plt.figure(figsize=(15, 2))
+        plt.axis('off')
+        plt.plot(time, loop)
+        plt.savefig('LoopPictures/LoopPic' + str(i) + '.png')
 
     def remove_loop(self):
         """
         1. Check if a loop is selected.
         2. Erase loop data from the loops list somewhere.
         """
+        self.loops.pop(self.selected_loop)
 
     def export_master(self):
         """
@@ -92,6 +110,8 @@
         1. Check if a loop is selected.
         2. Erase loop data from the loops list somewhere.
         """
+        self.selected_loop = number
+        print("loop", self.selected_loop, "seleccionat")
 
     def arrow(self, direction):
         """
@@ -105,27 +125,30 @@
         2. Erase loop data from the loops list somewhere.
         """
         event = threading.Event()
-        data, fs = sf.read("audio1.wav", always_2d=True)
-        #data, fs = sf.read(, always_2d=True)
-        #current_frame = 0
-        
+        # data, fs = sf.read(self.loops[0], always_2d=True)
+        # current_frame = 0
+
+        # we always assume the main loop is the main in loops[0]
+        data = self.loops[self.selected_loop]
+        fs = self.fs
+
         def callback(outdata, frames, time, status):
-            #global current_frame 	
+            # global current_frame
             if status:
                 print(status)
             chunksize = min(len(data) - self.current_frame, frames)
             outdata[:chunksize] = data[self.current_frame:self.current_frame + chunksize]
             if chunksize < frames:
                 outdata[chunksize:] = 0
-                self.current_frame = 0            		
-		#raise sd.CallbackStop()
+                self.current_frame = 0
+            # raise sd.CallbackStop()
             else:
                 self.current_frame += chunksize
 
         stream = sd.OutputStream(
             samplerate=fs, channels=data.shape[1],
             callback=callback, finished_callback=event.set)
-	
+
         with stream:
             event.wait()  # Wait until playback is finished
 
